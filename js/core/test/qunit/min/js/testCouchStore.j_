 /*global QUnit:false, module:false, test:false, asyncTest:false, expect:false*/
/*global start:false, stop:false ok:false, equal:false, notEqual:false, deepEqual:false*/
/*global notDeepEqual:false, strictEqual:false, notStrictEqual:false, raises:false*/

_jQuery(document).ready(function(){

	module("Couch storage", {
		setup: function(){
			// Clear localStorage
			for(var o in localStorage){ delete localStorage[o]; }

			// Global in testing environment.
			runtime = new JEFRi.Runtime({debug: {context: userContext}, store: JEFRi.CouchStore});
		}
	});

	asyncTest("CouchStore minimal save", function(){
		runtime.ready.done( function(){
			user = runtime.build("User", {name: "southerd", address: "davidsouther@gmail.com"});
			authinfo = user.authinfo(runtime.build('Authinfo', {})).authinfo();

			runtime.save_new().then(function(transaction){
				ok(transaction.entities && transaction.attributes, "Transaction entities and attributes existence.");
				ok(transaction.entities.length == 2, "Transaction has 2 entities.");
				// ok(_.keys(transaction.entities[0]).length == 6, "Entity has unexpected keys.");
				// This is a really bad assertion...
				// ok(_.symmetricDifference(_.keys(transaction.entities[0]._fields), ["user_id", "name", "address"]).length === 0, "Entity has unexpected fields.");
				start();
			});
		});
	});

	// var users = [
	// 	["David Souther", "davidsouther@gmail.com", {username: "southerd", activated: "true", created: new Date(2011, 1, 15, 15, 34, 5).toJSON(), last_ip: "192.168.2.79"}],
	// 	["JPorta", "jporta@example.com", {username: "portaj", activated: "true", created: new Date(2012, 1, 15, 15, 34, 5).toJSON(), last_ip: "192.168.2.80"}],
	// 	["Niemants", "andrew@example.com", {username: "andrew", activated: "false", created: new Date(2012, 1, 17, 15, 34, 5).toJSON(), last_ip: "80.234.2.79"}]
	// ];

	// asyncTest("CouchStore", function(){
	// 	runtime.ready.done(function(){
	// 		var _i;
	// 		for(_i=0; _i<users.length; _i++){
	// 			var user = runtime.build("User", {name: users[_i][0], address: users[_i][1]});
	// 			var authinfo = runtime.build("Authinfo", _.extend({authinfo_id: user.id()}, users[_i][2]));
	// 			user.authinfo(authinfo);
	// 		}
	// 		runtime.save_new().then(function(){
	// 			_.when(
	// 				runtime.get({_type: "User"}).then(function(results){
	// 					equal(results.User.length, 3, "Find users.");
	// 				}),
	// 				runtime.get({_type: "Authinfo", username: "southerd"}).then(function(results){
	// 					equal(results.Authinfo.length, 1, "Find southerd.");
	// 				}),
	// 				runtime.get({_type: "User", authinfo: {}}).then(function(results){
	// 					equal(results.Authinfo.length, 3, "Included authinfo relations.");
	// 					// Check that users and authinfos point to eachother...
	// 				}),
	// 				runtime.get({_type: "User", authinfo: {created: [">", new Date(2012, 1, 1).toJSON()]}}).then(function(results){
	// 					equal(results.Authinfo.length, 2, "Included and filtered authinfo relations.");
	// 					equal(results.User.length, 2, "Only included filtered relations.");
	// 				})
	// 			).done(function(){
	// 				start();
	// 			});
	// 		});
	// 	});
	// });
});
